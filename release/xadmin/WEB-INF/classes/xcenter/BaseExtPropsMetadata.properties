#
# SystemConfigMetadata.properties
#
# To enjoy the benefit of the Xadmin Settings GUI (starting in 6.5), this properties
# file must be maintained along with any/all changes to the Xadmin settings. This is the place where the 
# characteristics of all Xadmin configuration settings are defined. If you create a new setting and do not
# place information about it in this file, accessing the settings in the Xadmin GUI will fail miserably.
#
# Each metadatum fully describes a Xadmin configuration setting. This file contains only information about
# settings. This information is used by the Xadmin settings GUI to dynamically create a user interface
# for managing these settings. The values for the settings are stored in the Xadmin database in the 
# cfg_system_setting table.

# To identify a setting, take everything to the left of the first period ("."), ignoring any potential
# leading underscore. This is the identifier of the setting. All identifiers must be unique. 
# 
# For example, you will find the following associated block of properties in this file:
#
# BR_IE.label
# BR_IE.description
# BR_IE.datatype
# BR_IE.order
# BR_IE.category
#
# Notice how the .label and .description keys themselves are prefixed with an
# underscore.  This is so that this properties file can directly be used as a "resource
# bundle" file using Xstore's standard I18N code for retrieving file-based translations
# (dtv.i18n.DtvResourceBundle).
#
# The other properties (which do not start with the underscore) will be read and processed
# by different code (com.micros_retail.xadmin.util.gwt.server.ExtendedPropertiesMgr).
# But by sharing this file, all of the relevant metadata about each configurable setting can be neatly kept 
# together.
#
# Since an BaseExtPropsMetadata.properties file doubles as an i18n resource bundle file, the
# easiest way to create a "stub" for a language translation is to "grep" the base file for all
# lines which start with an underscore.
#
# Here's an example Unix command which will filter out all of the I18N keys, strip out ones
# that shouldn't be translated ("grep -v "**DO NOT TRANSLATE**"), leave the default English values,
# in there, and create a stub properties file for the French language:
#
# grep ^_ SystemConfigMetadata.properties | grep -v "**DO NOT TRANSLATE**" > SystemConfigMetadata.properties_fr_FR
#
# Each metadatum has the following set of attributes:
#
# .label=
# .description=
# .datatype=
# .datatypeParams.1=   {optional}
# .order=              {optional}
#
#
# 1) The .label should be a short string (about 20 to 40 characters) that succinctly defines
#    the config item.
#
#
# 2) The .description should be a verbose description of the config item (a paragraph or so).
#
#
# 3) .datatype refers to a set of datatypes which are roughly analagous to some Java types and others are 
#    just specialized versions of some simpler types (Directory versus Str).
#
#    However, these datatype classes are (or can be) stricter, and shall be used by the Xadmin settings
#    GUI to enforce validation rules about the values being entered for each config.
#
#    The basic types (and optional validation restrictions) are:
#
#    BigDec         value must be a BigDecimal
#                   (optional min and/or max)
#
#    Bool           value must be a boolean
#
#    Int            value must be an integer
#                   (optional min and/or max)
#
#    JavaClass      value must kinda look like a Java class (no space characters)
#                   (optional "validPackages" does a simple ".startsWith(packagePrefixStr)" validation
#
#    Str            value must be a String
#                   (with optional enumerated "validVal"'s, optional "allowMultipleValidVals", and optional "maxlen")
#
#    Translatable   value must be a String that looks like an Xstore translation code, i.e. starts
#                   with '_' or '+' and contains no space characters
#
#    Url            value must be a String that looks like a URL (implementation tbd)
#
#    Time           value must be a valid date 

#    UTCTime        value must be a valid date and will be considered in the timezone UTC (GMT) 
#
#    See all implementations of com.micros_retail.xadmin.configurator.shared.sysconfig.type.SysCfgType
#    for details.
#
#
# 3b) .datatypeParams.{n} offers a way to optionally customize/restrict the "validation behavior"
#     of the datatype.
#
#    A config might declare no datatypeParams, or one, or many.  Each datatypeParam needs to be
#    uniquely identified (as this is a standard Java properties file); hence there is an arbitrary
#    number associated with each parameter.
#
#    The possible value(s) of datatypeParams mostly depends on the datatype, because it's the datatype
#    that will perform validation.
#
#    However, all datatypes do support one generic datatypeParam:
#
# ........datatypeParams.0= allowEmptyVal=true
#
#    ** BY DEFAULT, ALL CONFIGURATIONS DO NOT ALLOW AN EMPTY VALUE! **.
#
#    Or in other words, each config has an implied "allowEmptyVal=false" datatypeParam.
#
#    There are a small number of exceptions, though, where it is important that a config be allowed to
#    have no value.  For these configs, the "allowEmptyVal=true" datatypeParam can be declared.
#
#    The rest of the datatypes can support their own custom datatypeParams.
#
#    For example, Int supports declaraing a min and/or max integer value like this:
#
# ........datatypeParams.1= min=1
# ........datatypeParams.2= max=10
#
#    This lets you define the validation behavior here in the metadata.
#
#    Another good example is for the Str datatype, which lets you basically declare an enumeration of
#    valid values:
#
# ........datatypeParams.1= validVal=DESTINATION
# ........datatypeParams.2= validVal=SELLING
# ........datatypeParams.3= validVal=DEST_INSTATE
#
#    This allows the Xadmin SysConfig GUI to not only restrict values to those indicated, it will
#    even adjust the gui to present these values as radio-button (or checkbox) widgets, so that these
#    values are the only ones the user can possibly choose.
#
#    Given a config with a Str datatype and a set of validVal's, by default the GUI forces the user to
#    only choose a single value (and presents the choices with radio-buttons).  For some configs, the user
#    needs to be able to pick *multiple* values (as with check-boxes).  The "allowMultipleValidVals"
#    datatypeParam can be used to enable this behavior.  For example:
#
# ........datatypeParams.0=allowMultipleValidVals=true
#
#    It is very common for these "multiple choice" configs to be combined with the "allowEmptyVal=true"
#    setting mentioned above.  If this setting is not present, then at least one checkbox will have to
#    be selected in order for the config to pass validation.
#
#
#    Note: the GUI will present the validVal's in the order in which they are defined
#          (as with ...datatypeParams.1=..., ...datatypeParams.2=..., ...datatypeParams.3=..., etc)
#
#    The validVal's should also be associated with i18n translation codes:
#
# ........datatypeParams.1= validVal=DESTINATION::_sendTaxType_DESTINATION
# ........datatypeParams.2= validVal=SELLING::_sendTaxType_SELLING
# ........datatypeParams.3= validVal=DEST_INSTATE::_sendTaxType_DEST_INSTATE
#
#    The codes must be standard Xstore translation codes (starting with an underscore).  The
#    translated value for the above code **MUST** be stored right in this properties file (or
#    in the customer-override SystemConfigMetadata.properties file, if there is one).
#
#    It may be advisable (although nothing enforces this) to devise some sort of convention
#    to avoid "namespace collisions" when providing translations for these valid values.  In
#    the above example, the Xstore i18n code starts with an underscore (as it must), and then
#    the translations for this particular set of valid values all follow with "sendTaxType_"
#    plus the enum code.  It's not absolutely necessary; the i18n code for SELLING could easily
#    just be "_selling".  It's up to developers to keep things tidy.
#
#    Also be aware that there are other translations in this file aside from valid values; for
#    example, categories are also translated in this file (see below).
#
#
#
# 4) .order is an integer attribute used to put things in order in the GUI.
#
#    Normally, things are ordered alphabetically.  This attribute overrides alphabetical ordering.
#
#    You can use this to force the Xadmin SysConfig GUI to present configs in a certain order
#    (within its category).  For example, look at the xxx_USERNAME and xxx_PASSWORD metadata.
#    If those were left to alphabetical sorting, xxx_PASSWORD will always come before xxx_USERNAME.
#    To force USERNAME to come up first, add an .order attribute to the configs you want to sort
#    specifically.
#
#    Each config has a default order of 0.  You may use positive or negative integers as necessary.
#
#
###################################################################################################

#Retail Location Metadata
BR_IE.label=_extendedProperties.BR_IE.label
BR_IE.description=_extendedProperties.BR_IE.description
BR_IE.datatype=Str
BR_IE.datatypeParams.0=maxlen=200
BR_IE.datatypeParams.1=allowEmptyVal=true
BR_IE.order=1
BR_IE.category=empty

BR_IM.label=_extendedProperties.BR_IM.label
BR_IM.description=_extendedProperties.BR_IM.description
BR_IM.datatype=Str
BR_IM.datatypeParams.0=maxlen=200
BR_IM.datatypeParams.1=allowEmptyVal=true
BR_IM.order=2
BR_IM.category=empty

BR_CORP_NAME.label=_extendedProperties.BR_CORP_NAME.label
BR_CORP_NAME.description=_extendedProperties.BR_CORP_NAME.description
BR_CORP_NAME.datatype=Str
BR_CORP_NAME.datatypeParams.0=maxlen=200
BR_CORP_NAME.datatypeParams.1=allowEmptyVal=true
BR_CORP_NAME.order=3
BR_CORP_NAME.category=empty

BR_CORP_FANTASY_NAME.label=_extendedProperties.BR_CORP_FANTASY_NAME.label
BR_CORP_FANTASY_NAME.description=_extendedProperties.BR_CORP_FANTASY_NAME.description
BR_CORP_FANTASY_NAME.datatype=Str
BR_CORP_FANTASY_NAME.datatypeParams.0=maxlen=200
BR_CORP_FANTASY_NAME.datatypeParams.1=allowEmptyVal=true
BR_CORP_FANTASY_NAME.order=4
BR_CORP_FANTASY_NAME.category=empty

BR_CRT.label=_extendedProperties.BR_CRT.label
BR_CRT.description=_extendedProperties.BR_CRT.description
BR_CRT.datatype=Str
BR_CRT.datatypeParams.0=maxlen=200
BR_CRT.datatypeParams.1=allowEmptyVal=true
BR_CRT.order=5
BR_CRT.category=empty

FR_SIRET.label=_extendedProperties.FR_SIRET.label
FR_SIRET.description=_extendedProperties.FR_SIRET.description
FR_SIRET.datatype=Str
FR_SIRET.datatypeParams.0=maxlen=200
FR_SIRET.datatypeParams.1=allowEmptyVal=true
FR_SIRET.order=1
FR_SIRET.category=empty

PT_SAFT_BUSINESS_NAME.label=_extendedProperties.PT_SAFT_BUSINESS_NAME.label
PT_SAFT_BUSINESS_NAME.description=_extendedProperties.PT_SAFT_BUSINESS_NAME.description
PT_SAFT_BUSINESS_NAME.datatype=Str
PT_SAFT_BUSINESS_NAME.datatypeParams.0=maxlen=200
PT_SAFT_BUSINESS_NAME.datatypeParams.1=allowEmptyVal=true
PT_SAFT_BUSINESS_NAME.order=1
PT_SAFT_BUSINESS_NAME.category=empty

PT_TAX_COUNTRY_REGION.label=_extendedProperties.PT_TAX_COUNTRY_REGION.label
PT_TAX_COUNTRY_REGION.description=_extendedProperties.PT_TAX_COUNTRY_REGION.description
PT_TAX_COUNTRY_REGION.datatype=Str
PT_TAX_COUNTRY_REGION.datatypeParams.0=maxlen=200
PT_TAX_COUNTRY_REGION.datatypeParams.1=allowEmptyVal=true
PT_TAX_COUNTRY_REGION.order=1
PT_TAX_COUNTRY_REGION.category=empty

#Reason code metadata
IT_FP_EXEMPTCODE.label=_extendedProperties.IT_FP_EXEMPTCODE.label
IT_FP_EXEMPTCODE.description=_extendedProperties.IT_FP_EXEMPTCODE.description
IT_FP_EXEMPTCODE.datatype=Str
IT_FP_EXEMPTCODE.datatypeParams.0=allowEmptyVal=true
IT_FP_EXEMPTCODE.datatypeParams.1=maxlen=200
IT_FP_EXEMPTCODE.order=1
IT_FP_EXEMPTCODE.category=empty

