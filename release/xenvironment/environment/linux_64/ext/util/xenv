#! /bin/sh
#
# FileName:     xenv
# Purpose:      Starts the xEnviornment as a daemon
# Author:       Sean M. Doty
# Customer:     xEnvironment
# Date:         11/12/2007
# Last Mod:     
# Mod By:       
# Revis:        1.00
# Notes:
# Revisions
#==========================================================================
#   Date     Init   Revis   Description
#--------------------------------------------------------------------------
#
#==========================================================================

# Stuff for YaST
### BEGIN INIT INFO
# Provides:          xEnvironment Startup
# Required-Start:    
# Required-Stop:
# Default-Start:     5
# Default-Stop:      0 1 2 6
# Short-Description: Startup of xEnvironment
# Description:       Starts xEnvironment
#	      
### END INIT INFO

# Check for missing binaries
PYTHON_BIN=/usr/bin/xenvpy2.4
test -x $PYTHON_BIN || { echo "$PYTHON_BIN not installed";
        if [ "$1" = "stop" ]; then exit 0;
        else exit 5; fi; }
        
export ENV_HOME=/opt/environment
export PYTHON_HOME=/usr/bin
export PYTHONPATH=/usr/lib/python2.4/,/usr/lib/python2.4/site-packages/

#Shell Variables, Root User access only!!
HOME=/root
export PATH=/sbin:/usr/sbin:/usr/local/sbin:/root/bin:/usr/local/bin:/usr/bin:/usr/X11R6/bin:/bin:/opt/gnome/bin:/usr/java/bin:/opt/ibm/javapos/bin:/opt/mysql-gui-tools-5.0
export GTK_PATH=/usr/local/lib/gtk-2.0:/opt/gnome/lib/gtk-2.0:/usr/lib/gtk-2.0
export GNOME2_PATH=/usr/local:/opt/gnome:/usr
export DISPLAY=:0.0
        
# Load the rc.status script for this service.
. /etc/rc.status

# Reset status of this service
rc_reset

case "$1" in
    start)
        echo -n "Starting the xEnvironment"
        ## Start daemon with startproc(8). If this fails
        ## the return value is set appropriately by startproc.
        
        cd $ENV_HOME
        startproc $ENV_HOME/environment.sh

        # Remember status and be verbose
        #rc_status -v
        ;;
    stop)
        echo -n "Shutting down xenv "
        ## Stop daemon with killUSER=rootproc(8) and if this fails
        ## killproc sets the return value according to LSB.

        killproc -TERM $PYTHON_BIN

        # Remember status and be verbose
        rc_status -v
        ;;
    restart)
        ## Stop the service and regardless of whether it was
        ## running or not, start it again.
        $0 stop
        $0 start

        # Remember status and be quiet
        #rc_status
        ;;
    *)
        ## If no parameters are given, print which are avaiable.
        echo "Usage: $0 {start|stop|restart}"
        exit 1
        ;;
esac


rc_exit
