#encoding=UTF-8
#********************************************************************
# Wrapper Properties
#********************************************************************

#include ../wrapper/conf/security.conf
#include ../wrapper/conf/params.conf
#include ../wrapper/conf/include-eng-%WRAPPER_OS%.conf

# working directory, relative to the wrapper.exe that is used to interpret 
#  all other paths (except #include directives) and used as the working 
#  directory when running the application
wrapper.working.dir=../
wrapper.java.command=../jre/bin/xenv_eng

# Java Main class.  This class must implement the WrapperListener interface
#  or guarantee that the WrapperManager class is initialized.  Helper
#  classes are provided to do this for you.  See the Integration section
#  of the documentation for details.
wrapper.java.mainclass=org.tanukisoftware.wrapper.WrapperSimpleApp
wrapper.app.parameter.1=org.eclipse.jetty.start.Main
wrapper.license.type=DEV
wrapper.license.id=202001100000108
wrapper.license.licensee=Oracle America, Inc.
wrapper.license.group=Retail
wrapper.license.dev_application=xstore-services
wrapper.license.features=pro, 64bit
wrapper.license.key.0=50f8-11f0-6004-50f0
wrapper.license.key.1=8633-0d1a-06f4-58b0
wrapper.license.key.2=2b3d-cb57-e8bf-5e87
wrapper.license.key.3=999f-4e92-fead-9404
wrapper.license.key.4=ef25-3ab7-d772-6549

# Configure PID and Anchor files
wrapper.anchorfile=./tmp/xenv_eng.anchor
wrapper.pidfile=./tmp/xenv_eng.wrapper.pid
wrapper.java.pidfile=./tmp/xenv_eng.java.pid

# Java Classpath (include wrapper.jar)  Add class path elements as needed starting from 1
wrapper.java.classpath.1=wrapper/lib/wrapper.jar
wrapper.java.classpath.2=cust_config
wrapper.java.classpath.3=config
wrapper.java.classpath.4=res
wrapper.java.classpath.5=lib/patch/*.jar
wrapper.java.classpath.6=lib/jetty/*.jar
wrapper.java.classpath.7=lib/*.jar
wrapper.java.classpath.8=lib/ext/*.jar
wrapper.java.classpath.9=lib/hardware/*.jar
wrapper.java.classpath.10=lib/hardware/epsonjpos/*.jar

# Java Library Path (location of Wrapper.DLL or libwrapper.so)
wrapper.java.library.path.1=bin

# Java Additional Parameters
wrapper.java.additional.1=-Djetty.home=.
wrapper.java.additional.2=-Djetty.base=.
wrapper.java.additional.3=-Djava.security.auth.login.config=./etc/login.conf
wrapper.java.additional.4=-Djetty.logs=./log
wrapper.java.additional.5=-Djavax.net.ssl.trustStore=res/ssl/.truststore
wrapper.java.additional.6=-splash:res/graphics/splash.png
wrapper.java.additional.7=-XX:+HeapDumpOnOutOfMemoryError
wrapper.java.additional.8=-XX:MaxMetaspaceSize=256m
wrapper.java.additional.9=-Dcom.sun.management.jmxremote
wrapper.java.additional.10=-XX:MetaspaceSize=64m
wrapper.java.additional.11=-server
wrapper.java.additional.12=-XX:+UseG1GC
wrapper.java.additional.13=-XX:+ParallelRefProcEnabled
#wrapper.java.additional.14=-Xdebug
#wrapper.java.additional.15=-Xrunjdwp:transport=dt_socket,address=8000,server=y

# Initial Java Heap Size (in MB)
wrapper.java.initmemory=64

# Maximum Java Heap Size (in MB)
wrapper.java.maxmemory=512

# Application parameters.  Add parameters as needed starting from 2
wrapper.app.parameter.2=etc/jetty.xml
#wrapper.app.parameter.3=<see platform specific config>

# Allow for the use of non-contiguous numbered properties
wrapper.ignore_sequence_gaps=TRUE

#********************************************************************
# Wrapper Logging Properties
#********************************************************************
# Format of output for the console.  (See docs for formats)
wrapper.console.format=PM

# Log Level for console output.  (See docs for log levels)
wrapper.console.loglevel=INFO

# Log file to use for wrapper output logging.
wrapper.logfile=./log/eng_wrapper.log

# Format of output for the log file.  (See docs for formats)
wrapper.logfile.format=LPTM

# Log Level for log file output.  (See docs for log levels)
wrapper.logfile.loglevel=INFO

# Maximum size that the log file will be allowed to grow to before
#  the log is rolled. Size is specified in bytes.  The default value
#  of 0, disables log rolling.  May abbreviate with the 'k' (kb) or
#  'm' (mb) suffix.  For example: 10m = 10 megabytes.
wrapper.logfile.maxsize=25m

# Maximum number of rolled log files which will be allowed before old
#  files are deleted.  The default value of 0 implies no limit.
wrapper.logfile.maxfiles=10

# Log Level for sys/event log output.  (See docs for log levels)
wrapper.syslog.loglevel=NONE

#********************************************************************
# Misc Wrapper Properties
#********************************************************************

# Controls the number of seconds to wait before killing an apparently hung app (default = 30)
wrapper.ping.timeout=90
wrapper.startup.timeout=180

# Default JVM ping interval
wrapper.ping.interval=60

# Command file; file is monitored by the wrapper to execute commands.
wrapper.commandfile=wrapper/conf/xenv_eng.command

# Restart the application if an out of memory error is detected
wrapper.filter.trigger.1=java.lang.OutOfMemoryError
wrapper.filter.action.1=RESTART

wrapper.event.default.loglevel = INFO
wrapper.event.default.command.loglevel = INFO

wrapper.event.jvm_prelaunch.command.block=TRUE
wrapper.event.jvm_prelaunch.command.block.timeout = 3600
wrapper.event.jvm_prelaunch.command.loglevel = INFO
wrapper.event.jvm_prelaunch.loglevel = INFO
wrapper.event.jvm_prelaunch.message = Launching update_jre script.

