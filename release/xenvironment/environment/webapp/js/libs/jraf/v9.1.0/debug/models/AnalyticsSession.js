define(["jquery","jraf/jrafcore","ojs/ojlogger","jraf/utils/ValidationUtils","jraf/services/ServiceManager"],(function(t,i,e,n,o){"use strict";var r=null;function a(){this._analyticsService=o.getAnalyticsService()}return a.startSession=function(t,i){return a._getInstance()._startSession(t,i)},a.prototype._startSession=function(t,i){var n=this;if(!this._analyticsService){var o="AnalyticsSession._startSession: Failed to start analytics session.  No AnalyticsService configured.";return e.error(o),Promise.reject(o)}return this._analyticsService.loadAgent(),this._initializeMetadata(t,i).then((function(){n._initializeAgent()})).catch((function(t){var i="AnalyticsSession._startSession: Failed to start analytics session.  Cause: "+(t.message||t);return e.error(i),Promise.reject(i)}))},a.prototype._initializeMetadata=function(e,n){var o=this,r={jrafVersion:i.version};return this._visitorMetadata=t.extend({},e),this._accountMetadata=t.extend({},n,r),this._initializeAccountMetadata().then((function(){return o._initializeVisitorMetadata()}))},a.prototype._initializeAccountMetadata=function(){return n.isNonemptyString(this._accountMetadata.environment)?n.isNonemptyString(this._accountMetadata.solutionName)&&n.isNonemptyString(this._accountMetadata.solutionVersion)?this._initializeAccountId():Promise.reject("AnalyticsSession._initializeAccountMetadata: Missing solutionName and/or solutionVersion in account metadata."):Promise.reject("AnalyticsSession._initializeAccountMetadata: Missing environment in account metadata.")},a.prototype._initializeAccountId=function(){var t=this;return this._accountMetadata.id?Promise.resolve():this._getAccountId().then((function(i){if(!n.isNonemptyString(i))throw new Error("AnalyticsSession._initializeAccountId: Failed to access customer account id from MDF data.");t._accountMetadata.id=i}))},a.prototype._getAccountId=function(){return Promise.reject("Applications must provide the account id (accountMetadata.id) in this version.  This is temporary until platform services is updated to provide the account id.")},a.prototype._initializeVisitorMetadata=function(){var t=this._completeVisitorId(),i=this._completeVisitorGroup();return Promise.all([t,i])},a.prototype._completeVisitorId=function(){var t=this;return n.isNonemptyString(this._visitorMetadata.id)?Promise.resolve():this._getVisitorId().then((function(i){if(!n.isNonemptyString(i))throw new Error("AnalyticsSession._completeVisitorId: Failed to retrieve visitor id.");t._visitorMetadata.id=i}))},a.prototype._getVisitorId=function(){return this._accountMetadata.id?Promise.reject("Applications must provide the visitor id (visitorMetadata.id) in this version.  This is temporary until platform services is updated to calculate the visitor id."):Promise.reject("AnalyticsSession._completeVisitorId: Missing Account ID (accountMetadata.id).  Unable to retrieve visitor id.")},a.prototype._completeVisitorGroup=function(){var t=this;return this._visitorMetadata.group?Promise.resolve():this._getUserRoles().then((function(i){if(!n.isArray(i))throw new Error("AnalyticsSession._completeVisitorRole: Failed to retrieve user roles.");t._visitorMetadata.group=i.map((function(t){return t.roleName}))}))},a.prototype._getUserRoles=function(){var t=o.getIdentityService();return t?t.getCurrentUserRoles().then((function(t){return t.roles})):Promise.reject("AnalyticsSession._getUserRoles: No Identity Service is configured.  Unable to access user roles.")},a.prototype._initializeAgent=function(){this._analyticsService.initializeAgent(this._visitorMetadata,this._accountMetadata)},a._getInstance=function(){return r||(r=new a),r},a}));