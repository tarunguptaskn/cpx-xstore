<?xml version="1.0" encoding="UTF-8"?>
<project name="customer-xenv" default="generation" basedir=".">
  <!-- import the core script -->
  <property name="core.project" location="${basedir}/../ksr" />
  <import file="${core.project}/core.xml"/>

  <!-- set properties that are not overridden in properties file or from a call into this file -->
  <property name="jar.file" location="${basedir}/${build.customerId.lc}-xenv.jar" />
  <property name="zip.file" location="${build.customerId.lc}-xenv.zip" />
  <property name="dist" location="${basedir}/dist" />
  <property name="src" location="${basedir}/src" />
  <property name="src.test" location="${basedir}/src-test" />
  <property name="classes" location="${basedir}/classes" />
  <property name="classes.test" location="${basedir}/classes-test" />
  <property name="root" location="${basedir}/root" />
  <property name="cust_config" location="${basedir}/root/cust_config" />
  <property name="ui_cust_config" location="${basedir}/root/ui_cust_config" />
  <property name="base.lib" location="${xenvironment.artifact.dir}/environment/lib" />
  <property name="base.lib.ext" location="${base.lib}/ext" />
  <property name="cust.lib" location="${basedir}/lib" />
  <property name="cust.lib.ext" location="${cust.lib}/ext" />
  <property name="cust.lib.ext.build" location="${cust.lib}/ext/build" />
  <property name="cust.hotfix.lib" location="${basedir}/hotfix-lib" />
  <condition property="full.version" value="${build.baseversion}_${build.custversion}" else="${build.baseversion}_${build.custversion}_${build.patchversion}">
    <equals arg1="0.0" arg2="${build.patchversion}" />
  </condition>

  <!-- define resource collections that will be used for various parts of the build process -->
  <fileset id="hotfix.jars" dir="${cust.hotfix.lib}" includes="*.jar" erroronmissingdir="false"  />
  <path id="build.classpath" description="A path including all dependency libraries needed to build main application classes in this project.">
    <fileset refid="hotfix.jars" />
    <fileset dir="${cust.lib}" includes="*.jar" />
    <fileset dir="${base.lib}" includes="*.jar" />
    <fileset dir="${cust.lib.ext}" includes="*.jar" />
    <fileset dir="${base.lib.ext}" includes="*.jar" />
  </path>
  <path id="runtime.classpath" description="A path including all jars, classes, and configs that will be available at runtime.">
    <pathelement location="${classes}" />
    <pathelement location="${cust_config}" />
    <pathelement location="${ui_cust_config}" />
    <path refid="build.classpath" />
  </path>
  <path id="config.validation.classpath" description="A classpath for config validation.">
    <path refid="runtime.classpath" />
    <fileset dir="${cust.lib.ext.build}" includes="*.jar" />
  </path>

  <!-- detect if conditional sections should be executed -->
  <condition property="has.test">
    <resourcecount count="0" when="greater">
      <fileset dir="${src.test}" includes="**/*.java" />
    </resourcecount>
  </condition>

  <!-- dump some basic environment-related info -->
  <echo message="Building for customer: ${build.customerId}" />
  <echo message="JAVA_HOME=${env.JAVA_HOME}" />
  <echo message="classes=${classes}" />
  <echo message="cust.lib=${cust.lib}" />
  <echo message="cust_config=${cust_config}" />
  <echo message="ui_cust_config=${ui_cust_config}" />
  <echo message="base.lib=${base.lib}" />

  <!-- extensible sections of the build process -->
  <extension-point name="clean" description="Cleans everything" />
  <extension-point name="generation" description="Performs any source generation tasks" />
  <extension-point name="distribute" description="Performs tasks related to distributing artifacts." />

  <!-- now that conditions, extension-points, properties, paths, etc. have been defined, import customizations -->
  <import file="build-custom.xml" />

  <!-- build targets -->
  <target name="clean-classes" description="Cleans classes generated by this script" extensionOf="clean">
    <delete dir="${classes}" />
  </target>

  <target name="clean-test-classes" description="Cleans test classes generated by this script" extensionOf="clean">
    <delete dir="${classes.test}" />
  </target>

  <target name="clean-dist" description="Cleans the 'dist' location, which contains files to be included in the overlay package, and the dist zip file." extensionOf="clean">
    <delete dir="${dist}" />
    <delete file="${zip.file}" />
  </target>

  <target name="clean-jar" description="Removes jar files generated by this script" extensionOf="clean">
    <delete file="${jar.file}" />
  </target>

  <target name="compile-test" description="Compiles test source if necessary" if="has.test" depends="compile,clean-test-classes">
    <compilejava srcdir="${src.test}" destdir="${classes.test}" classpathref="runtime.classpath" />
    <!-- copy over test resources like eclipse does -->
    <copy todir="${classes.test}">
      <fileset dir="${src.test}" excludes="**/*.java" />
    </copy>
  </target>

  <target name="compile" description="Performs any pre-requisite steps, then compiles the java sources that will be included in the build" depends="generation,clean-classes">
    <mkdir dir="${classes}" />
    <compilejava srcdir="${src}" destdir="${classes}" classpathref="build.classpath" />
  </target>

  <target name="make" description="Compiles and assembles distribution artifacts, then creates a zip file" depends="clean-dist,jar">
    <!-- copy files to dist directory -->
    <echo>Copying CIPs from pos overlay at ${xstore.overlay.dir}/res/keys</echo>
    <copy todir="${dist}/environment" overwrite="true" verbose="true">
      <fileset dir="${xstore.overlay.dir}">
        <include name="res/keys/*" />
      </fileset>
    </copy>
    <echo>Copying truststore from pos overlay at ${xstore.overlay.dir}/res/ssl</echo>
    <copy todir="${dist}/environment" overwrite="true" verbose="true">
      <fileset dir="${xstore.overlay.dir}">
        <include name="res/ssl/*" />
      </fileset>
    </copy>
    <echo>Copying "res" folder from xenvironment overlay</echo>
    <copy todir="${dist}/environment" overwrite="true" verbose="true">
      <fileset dir=".">
        <include name="res/**" />
        <exclude name="res/data/**" />
      </fileset>
    </copy>
    <echo>Copying "lib" and "root" folders from xenvironment overlay</echo>
    <copy todir="${dist}/environment" overwrite="true" verbose="true">
      <fileset dir=".">
        <include name="lib/**" />
        <exclude name="lib/src/**" />
        <exclude name="lib/ext/build/**" />
      </fileset>
      <fileset dir="${root}" />
    </copy>
    <echo>Including compiled JAR ${jar.file}</echo>
    <copy todir="${dist}/environment/lib" overwrite="true" verbose="true">
      <file file="${jar.file}" />
    </copy>

    <!-- zip target contents into the distro zip -->
    <zip file="${zip.file}" basedir="${dist}" />
  </target>

  <target name="contribute-hotfixes" description="Contributes the contents of hotfix jar files to the classes directory">
    <unjar dest="${classes}" >
      <fileset refid="hotfix.jars" />
    </unjar>
  	<pathconvert property="hotfix.list" pathsep="${line.separator}">
      <fileset refid="hotfix.jars" />
      <flattenmapper/>
    </pathconvert>
    <echo file="${classes}/hotfix.manifest" message="${hotfix.list}" />
  </target>

  <target name="jar" description="Creates jar files that will be delivered with the application" depends="clean-jar,compile,contribute-hotfixes,check-configs-wellformed">
    <createjar jarfile="${jar.file}">
      <jarcontents>
        <!-- include classes generated by this project -->
        <fileset dir="${classes}" />
      </jarcontents>
    </createjar>
  </target>

  <target name="check-configs-wellformed" description="Checks configuration XML files for structural integrity">
    <xmlvalidate failonerror="yes" lenient="yes" warn="yes">
      <fileset dir="${cust_config}" includes="**/*.xml" />
    </xmlvalidate>
    <xmlvalidate failonerror="yes" lenient="yes" warn="yes">
      <fileset dir="${ui_cust_config}" includes="**/*.xml" />
    </xmlvalidate>
  </target>

  <!-- build macros -->
  <macrodef name="compilejava" description="Compiles java sources">
    <attribute name="srcdir" />
    <attribute name="destdir" />
    <attribute name="classpathref" />
    <sequential>
      <mkdir dir="@{destdir}" />
      <javac srcdir="@{srcdir}" destdir="@{destdir}" classpathref="@{classpathref}" deprecation="true" debug="true" fork="true" memoryMaximumSize="256m" includeantruntime="false" />
    </sequential>
  </macrodef>
  <macrodef name="createjar" description="Creates a jar file with the provided contents and standard manifest details.">
    <attribute name="jarfile" />
    <element name="jarcontents" optional="false" />
    <sequential>
      <jar jarfile="@{jarfile}" compress="true">
        <manifest>
          <attribute name="Built-By" value="${user.name}" />
          <attribute name="Build-Time" value="${env.BUILD_ID}" />
          <attribute name="Build-VM-Vendor" value="${java.vm.vendor}" />
          <attribute name="Build-VM-Name" value="${java.vm.name}" />
          <attribute name="Build-VM-Version" value="${java.vm.version}" />
          <attribute name="Build-OS" value="${os.name} (${os.arch}) version ${os.version}" />
          <attribute name="Jenkins-Job-Name" value="${env.JOB_NAME}" />
          <attribute name="Jenkins-Build-Number" value="${env.BUILD_NUMBER}" />
          <attribute name="SVN-Revision" value="${env.SVN_REVISION}" />
          <attribute name="Xstore-Target-Version" value="${xstore.version}" />
        </manifest>
        <jarcontents />
      </jar>
    </sequential>
  </macrodef>
</project>